/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package project;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;

/**
 *
 * @author ataturkoglu
 */
public class teacherGUI extends javax.swing.JFrame {

    private ArrayList<Account> teachers;

    /**
     * Creates new form teacher
     */
    public teacherGUI() {

        initComponents();

        // Initialize the ArrayList 'teachers'
        teachers = new ArrayList<>();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        teacherBtnGroup = new javax.swing.ButtonGroup();
        formLb = new javax.swing.JLabel();
        subjectLb = new javax.swing.JLabel();
        locationLb = new javax.swing.JLabel();
        ageLb = new javax.swing.JLabel();
        expLb = new javax.swing.JLabel();
        infoLb = new javax.swing.JLabel();
        expPane = new javax.swing.JScrollPane();
        expTf = new javax.swing.JTextArea();
        infoPane = new javax.swing.JScrollPane();
        infoTf = new javax.swing.JTextArea();
        subjectTf = new javax.swing.JTextField();
        ageTf = new javax.swing.JTextField();
        locationTf = new javax.swing.JTextField();
        confirm = new javax.swing.JCheckBox();
        submitBtn = new javax.swing.JButton();
        longBtn = new javax.swing.JRadioButton();
        shortBtn = new javax.swing.JRadioButton();
        firstNameLb = new javax.swing.JLabel();
        emailLb = new javax.swing.JLabel();
        firstNameTf = new javax.swing.JTextField();
        emailTf = new javax.swing.JTextField();
        displayBtn = new javax.swing.JButton();
        searchBtn = new javax.swing.JButton();
        lastNameLb = new javax.swing.JLabel();
        lastNameTf = new javax.swing.JTextField();
        navBar1 = new javax.swing.JMenuBar();
        homeF1 = new javax.swing.JMenu();
        homeItem1 = new javax.swing.JMenuItem();
        coursesF = new javax.swing.JMenu();
        coursesItem = new javax.swing.JMenuItem();
        signupMenu = new javax.swing.JMenuItem();
        loginItem = new javax.swing.JMenuItem();
        schoolF = new javax.swing.JMenu();
        applicationItem = new javax.swing.JMenuItem();
        donationItem = new javax.swing.JMenuItem();
        contactT = new javax.swing.JMenu();
        forum = new javax.swing.JMenuItem();
        volunteerT = new javax.swing.JMenu();
        volunteerItem = new javax.swing.JMenuItem();
        mathT = new javax.swing.JMenu();
        mathItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        formLb.setFont(new java.awt.Font("Arial", 0, 24)); // NOI18N
        formLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        formLb.setText("Teacher Form");

        subjectLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        subjectLb.setText("Subject:");

        locationLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        locationLb.setText("Location:");

        ageLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        ageLb.setText("Age:");

        expLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        expLb.setText("Experience:");

        infoLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLb.setText("Other information:");

        expTf.setColumns(20);
        expTf.setLineWrap(true);
        expTf.setRows(5);
        expPane.setViewportView(expTf);

        infoTf.setColumns(20);
        infoTf.setLineWrap(true);
        infoTf.setRows(5);
        infoPane.setViewportView(infoTf);

        subjectTf.setSize(new java.awt.Dimension(78, 20));

        ageTf.setSize(new java.awt.Dimension(78, 20));

        locationTf.setSize(new java.awt.Dimension(78, 20));

        confirm.setText("I confirm that I want to become a volunteer teacher");
        confirm.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        submitBtn.setText("Submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        teacherBtnGroup.add(longBtn);
        longBtn.setText("Long Time (1 Year)");
        longBtn.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        longBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                longBtnActionPerformed(evt);
            }
        });

        teacherBtnGroup.add(shortBtn);
        shortBtn.setText("Short Time (1 Month)");
        shortBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shortBtnActionPerformed(evt);
            }
        });

        firstNameLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        firstNameLb.setText("First name:");

        emailLb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        emailLb.setText("Email:");

        firstNameTf.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        displayBtn.setText("Display");
        displayBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        lastNameLb.setText("Last name:");

        navBar1.setBackground(new java.awt.Color(204, 204, 255));

        homeF1.setText("Home");

        homeItem1.setText("Home");
        homeItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                homeItem1ActionPerformed(evt);
            }
        });
        homeF1.add(homeItem1);

        navBar1.add(homeF1);

        coursesF.setText("Courses");

        coursesItem.setText("Courses");
        coursesItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                coursesItemActionPerformed(evt);
            }
        });
        coursesF.add(coursesItem);

        signupMenu.setText("Sign Up");
        signupMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signupMenuActionPerformed(evt);
            }
        });
        coursesF.add(signupMenu);

        loginItem.setText("Log In");
        loginItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginItemActionPerformed(evt);
            }
        });
        coursesF.add(loginItem);

        navBar1.add(coursesF);

        schoolF.setText("School");

        applicationItem.setText("Application");
        applicationItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applicationItemActionPerformed(evt);
            }
        });
        schoolF.add(applicationItem);

        donationItem.setText("Donation");
        donationItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                donationItemActionPerformed(evt);
            }
        });
        schoolF.add(donationItem);

        navBar1.add(schoolF);

        contactT.setText("Contact");

        forum.setText("Forum");
        forum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forumActionPerformed(evt);
            }
        });
        contactT.add(forum);

        navBar1.add(contactT);

        volunteerT.setText("Volunteer");

        volunteerItem.setText("Volunteer Teacher");
        volunteerItem.setToolTipText("");
        volunteerItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                volunteerItemActionPerformed(evt);
            }
        });
        volunteerT.add(volunteerItem);

        navBar1.add(volunteerT);

        mathT.setText("Math Game");

        mathItem.setText("Math Game");
        mathItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mathItemActionPerformed(evt);
            }
        });
        mathT.add(mathItem);

        navBar1.add(mathT);

        setJMenuBar(navBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(confirm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(longBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 80, Short.MAX_VALUE)
                .addComponent(shortBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(formLb, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(searchBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(displayBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(submitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(expLb, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ageLb, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(locationLb, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(subjectLb, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addComponent(emailLb, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(lastNameLb, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(infoLb, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(firstNameLb, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(emailTf)
                        .addComponent(lastNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(infoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(expPane, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ageTf, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationTf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(subjectTf, javax.swing.GroupLayout.PREFERRED_SIZE, 167, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(formLb, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(firstNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameLb))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lastNameTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastNameLb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(emailTf, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emailLb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subjectTf, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(subjectLb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(locationTf, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(locationLb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ageTf, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ageLb))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(expPane, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(expLb)
                        .addGap(29, 29, 29)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(infoLb)
                    .addComponent(infoPane, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(shortBtn)
                    .addComponent(longBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(confirm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(submitBtn)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchBtn)
                    .addComponent(displayBtn))
                .addGap(31, 31, 31))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Form Submit button
    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:
        // if else to prevent any input from being empty
        if (firstNameTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the first name field.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (lastNameTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the last name field.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (emailTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the email field.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (subjectTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the subject field.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (locationTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the location field.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (ageTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the age field.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (expTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the experience field.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (infoTf.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Please fill in the other information field.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!(longBtn.isSelected() || shortBtn.isSelected())) {
            JOptionPane.showMessageDialog(this, "Please select one of the time options.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else if (!confirm.isSelected()) {
            JOptionPane.showMessageDialog(this, "Please tick the checkbox.", "Warning", JOptionPane.WARNING_MESSAGE);
        } else {
            try {
                // If all fields are filled and the checkbox is checked, perform form operations

                teacher myTeacher = new teacher();
                // Get texts from form
                myTeacher.setFirstName(firstNameTf.getText());
                myTeacher.setLastName(lastNameTf.getText());
                myTeacher.setEmail(emailTf.getText().toLowerCase());
                myTeacher.setSubject(subjectTf.getText());
                myTeacher.setLocation(locationTf.getText());
                myTeacher.setAge(Integer.parseInt(ageTf.getText()));
                myTeacher.setExperience(expTf.getText());
                myTeacher.setOther_info(infoTf.getText());

                // Set the time type depending on which radio button is selected.
                if (longBtn.isSelected()) {
                    myTeacher.setTimeType("Long Term");
                } else if (shortBtn.isSelected()) {
                    myTeacher.setTimeType("Short Term");
                }

                teachers.add(myTeacher);

                // File I/O (Submit button save the information in teachers.dat same time)
                File f;
                FileOutputStream fStream;
                ObjectOutputStream oStream;

                try {
                    // Create a File object to represent the file 'teachers.dat'
                    f = new File("teachers.dat");

                    // Create a FileOutputStream to write data to the File 'f'
                    fStream = new FileOutputStream(f);

                    // Wrap the FileOutputStream in an ObjectOutputStream. This allows us to write objects to the stream
                    oStream = new ObjectOutputStream(fStream);

                    // Write the 'teachers' ArrayList object to the ObjectOutputStream, which serializes the object to the file
                    oStream.writeObject(teachers);

                    // Close the ObjectOutputStream
                    oStream.close();
                } catch (IOException e) {
                    // If an IOException is caught, print its message to the console.
                    System.out.println(e);
                }

                // Clear the form after submit
                firstNameTf.setText("");
                lastNameTf.setText("");
                emailTf.setText("");
                subjectTf.setText("");
                locationTf.setText("");
                ageTf.setText("");
                expTf.setText("");
                infoTf.setText("");
                confirm.setSelected(false);
                teacherBtnGroup.clearSelection();
                JOptionPane.showMessageDialog(null, "Thank You!");
            } catch (NumberFormatException e) {
                // If a NumberFormatException error is received, warn the user
                JOptionPane.showMessageDialog(this, "Please enter a valid number for the age field.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }


    }//GEN-LAST:event_submitBtnActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed

    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void displayBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayBtnActionPerformed
        // TODO add your handling code here:

        // When user click display button the button first load and read the file and after display informations
        File f;
        FileInputStream fStream;
        ObjectInputStream oStream;

        try {
            f = new File("teachers.dat");

            // Create a FileInputStream
            fStream = new FileInputStream(f);

            // Wrap the FileInputStream in an ObjectInputStream to read objects from the stream
            oStream = new ObjectInputStream(fStream);

            // Read the serialized object from the file and cast it to an ArrayList of 'teacher' objects
            teachers = (ArrayList<Account>) oStream.readObject();

            // Close the ObjectInputStream
            oStream.close();
        } catch (IOException | ClassNotFoundException e) {
            // If an IOException or ClassNotFoundException is caught, print its message to the console
            System.out.println(e);
        }

        if (!teachers.isEmpty()) {
            // Adding StringBuilder to connect teacher details
            StringBuilder detailsBuilder = new StringBuilder();

            // Loop through each 'teacher' object in the 'teachers' ArrayList
            for (Account myTeacher : teachers) {
                // Append the details of each teacher to the StringBuilder
                detailsBuilder.append(myTeacher.getDetails()).append("\n\n");
            }

            // Create a JTextArea to display the teacher details
            JTextArea textArea = new JTextArea(detailsBuilder.toString());
            // Enables line wrapping in the text area
            // This means long lines of text will wrap onto the next line
            textArea.setLineWrap(true);
            // Sets the wrapping style to wrap by words
            // This makes sure that the line breaks happen between words not in the middle of them
            textArea.setWrapStyleWord(true);
            // Makes the text area non-editable
            textArea.setEditable(false);
            textArea.setColumns(30);
            textArea.setRows(10);

            // Place the JTextArea in a JScrollPane to add scrollbars
            JScrollPane scrollPane = new JScrollPane(textArea);

            // Display the scrollPane with the teacher details in a JOptionPane dialog
            JOptionPane.showMessageDialog(null, scrollPane);
        } else {
            // If the 'teachers' ArrayList is empty, display a message indicating no data
            JOptionPane.showMessageDialog(null, "No teacher data to display.", "No Data", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_displayBtnActionPerformed

    private void longBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_longBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_longBtnActionPerformed

    private void shortBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shortBtnActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shortBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        // TODO add your handling code here:

        // When user click search button the button first load and read the file and after display informations
        File f;
        FileInputStream fStream;
        ObjectInputStream oStream;

        try {
            f = new File("teachers.dat");

            // Create a FileInputStream
            fStream = new FileInputStream(f);

            // Wrap the FileInputStream in an ObjectInputStream to read objects from the stream
            oStream = new ObjectInputStream(fStream);

            // Read the serialized object from the file and cast it to an ArrayList of 'teacher' objects
            teachers = (ArrayList<Account>) oStream.readObject();

            // Close the ObjectInputStream
            oStream.close();
        } catch (IOException | ClassNotFoundException e) {
            // If an IOException or ClassNotFoundException is caught, print its message to the console
            System.out.println(e);
        }

        // Check if the teachers list is empty
        if (teachers.isEmpty()) {
            // Show a message dialog if the list is empty
            JOptionPane.showMessageDialog(null, "Sorry, there are no teachers to search.", "No Data", JOptionPane.INFORMATION_MESSAGE);
        } else if (!teachers.isEmpty()) {
            // Ask the user for the name they want to search for
            String searchName = JOptionPane.showInputDialog(null, "Please enter the full name to search");

            // Check if the user's search input is empty
            if (searchName != null && !searchName.isEmpty()) {
                // Initialize a StringBuilder to to connect matching teachers details
                StringBuilder matchingTeachers = new StringBuilder();

                // Iterate through the teachers list
                for (Account myTeacher : teachers) {
                    String fullName = myTeacher.getFirstName() + " " + myTeacher.getLastName();
                    // Check if the current teacher's name matches the search term, ignoring case
                    if (fullName.equalsIgnoreCase(searchName)) {
                        // Append the details of the matching teachers to the StringBuilder
                        matchingTeachers.append(myTeacher.getDetails()).append("\n\n");
                    }
                }

                // Check if any teachers matched the search term
                if (matchingTeachers.length() == 0) {
                    // Show a message dialog if no matches were found
                    JOptionPane.showMessageDialog(null, "No teacher found with the given name");
                } else {
                    // Create a JTextArea to show teacher details
                    JTextArea textArea = new JTextArea(matchingTeachers.toString());
                    // Enables line wrapping in the text area
                    // This means long lines of text will wrap onto the next line
                    textArea.setLineWrap(true);
                    // Sets the wrapping style to wrap by words
                    // This makes sure that the line breaks happen between words not in the middle of them
                    textArea.setWrapStyleWord(true);
                    // Makes the text area non-editable
                    textArea.setEditable(false);
                    textArea.setColumns(30);
                    textArea.setRows(10);

                    // Place JTextArea inside a JScrollPane to add scrollbars
                    JScrollPane scrollPane = new JScrollPane(textArea);

                    // Show teacher details in a JOptionPane dialog with JScrollPane
                    JOptionPane.showMessageDialog(null, scrollPane);
                }
            } else {
                // User canceled or closed without entering anything
                System.out.println("No input provided or cancelled by user");
            }

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void homeItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_homeItem1ActionPerformed
        // TODO add your handling code here:
        ProjectGUI appGUI = new ProjectGUI();

        // make the new ui appear
        appGUI.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_homeItem1ActionPerformed

    private void coursesItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_coursesItemActionPerformed
        // TODO add your handling code here:
        CoursesGUI appGUI = new CoursesGUI();

        // make the new ui appear
        appGUI.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_coursesItemActionPerformed

    private void signupMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signupMenuActionPerformed
        // creates a new instance of the Sign Up GUI
        SignupGUI newSignupGUI = new SignupGUI();

        // makes the new ui appear
        newSignupGUI.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_signupMenuActionPerformed

    private void loginItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginItemActionPerformed

        // creates a new instance of the Sign Up GUI
        LoginGUI newLogin = new LoginGUI();

        // makes the new ui appear
        newLogin.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_loginItemActionPerformed

    private void applicationItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applicationItemActionPerformed
        // creates a new instance of the Application GUI
        ApplicationGUI newApp = new ApplicationGUI();

        // makes the new ui appear
        newApp.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_applicationItemActionPerformed

    private void donationItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_donationItemActionPerformed
        // creates a new instance of the Donation GUI
        DonationGUI newDonation = new DonationGUI();

        // makes the new ui appear
        newDonation.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_donationItemActionPerformed

    private void forumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forumActionPerformed
        // creates a new instance of the feedback GUI
        feedbackGUI newFeedback = new feedbackGUI();

        // makes the new ui appear
        newFeedback.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_forumActionPerformed

    private void volunteerItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_volunteerItemActionPerformed
        // creates a new instance of the Sign Up GUI
        teacherGUI newTeacher = new teacherGUI();

        // makes the new ui appear
        newTeacher.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_volunteerItemActionPerformed

    private void mathItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mathItemActionPerformed
        // creates a new instance of the Sign Up GUI
        mathGUI newMath = new mathGUI();

        // makes the new ui appear
        newMath.setVisible(true);

        // close the Project GUI
        this.dispose();
    }//GEN-LAST:event_mathItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(teacherGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(teacherGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(teacherGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(teacherGUI.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new teacherGUI().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ageLb;
    private javax.swing.JTextField ageTf;
    private javax.swing.JMenuItem applicationItem;
    private javax.swing.JCheckBox confirm;
    private javax.swing.JMenu contactT;
    private javax.swing.JMenu coursesF;
    private javax.swing.JMenuItem coursesItem;
    private javax.swing.JButton displayBtn;
    private javax.swing.JMenuItem donationItem;
    private javax.swing.JLabel emailLb;
    private javax.swing.JTextField emailTf;
    private javax.swing.JLabel expLb;
    private javax.swing.JScrollPane expPane;
    private javax.swing.JTextArea expTf;
    private javax.swing.JLabel firstNameLb;
    private javax.swing.JTextField firstNameTf;
    private javax.swing.JLabel formLb;
    private javax.swing.JMenuItem forum;
    private javax.swing.JMenu homeF1;
    private javax.swing.JMenuItem homeItem1;
    private javax.swing.JLabel infoLb;
    private javax.swing.JScrollPane infoPane;
    private javax.swing.JTextArea infoTf;
    private javax.swing.JLabel lastNameLb;
    private javax.swing.JTextField lastNameTf;
    private javax.swing.JLabel locationLb;
    private javax.swing.JTextField locationTf;
    private javax.swing.JMenuItem loginItem;
    private javax.swing.JRadioButton longBtn;
    private javax.swing.JMenuItem mathItem;
    private javax.swing.JMenu mathT;
    private javax.swing.JMenuBar navBar1;
    private javax.swing.JMenu schoolF;
    private javax.swing.JButton searchBtn;
    private javax.swing.JRadioButton shortBtn;
    private javax.swing.JMenuItem signupMenu;
    private javax.swing.JLabel subjectLb;
    private javax.swing.JTextField subjectTf;
    private javax.swing.JButton submitBtn;
    private javax.swing.ButtonGroup teacherBtnGroup;
    private javax.swing.JMenuItem volunteerItem;
    private javax.swing.JMenu volunteerT;
    // End of variables declaration//GEN-END:variables
}
